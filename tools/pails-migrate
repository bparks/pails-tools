#!/bin/bash

TOOLS_DIR=`dirname $0`

APP_DIR=.

if [ ! -e app/config/application.php -a ! -e vendor/pails/pails ]; then
  echo "This is not a pails app"
  exit 1
fi

if [ ! -e vendor/pails/activerecord ]; then
  echo "pails-activerecord is required. Install it by running"
  echo "    composer require pails/activerecord"
  echo "However, if you're not using activerecord, you likely don't have any"
  echo "migrations to be run"
  exit 1
fi

F_PAILS_ENV=development
if [ -e .environment ]; then
    F_PAILS_ENV=$(cat .environment)
fi
: ${PAILS_ENV:=$F_PAILS_ENV}

#First, let's see if we need to create the table
php <<EOT
<?php
include('app/config/application.php');
date_default_timezone_set('UTC');
include('vendor/autoload.php');
class MigrationHistory extends ActiveRecord\\Model {}
ActiveRecord\\Config::initialize(function(\$cfg) use (\$CONNECTION_STRINGS)
{
  \$cfg->set_connections(\$CONNECTION_STRINGS);
  \$cfg->set_default_connection('$PAILS_ENV');
});
\$conn = ActiveRecord\\Connection::instance();
\$conn->query('create table if not exists migration_histories
( id integer not null auto_increment primary key,
migration_id varchar(30) not null,
migration_date datetime
)');
EOT

function apply_migration() {
  file=$1
  MIGRATION_ID=$2

  MIGRATED_DATE=$(php <<EOT
<?php
  include('app/config/application.php');
  date_default_timezone_set('UTC');
  include('vendor/autoload.php');
  class MigrationHistory extends ActiveRecord\\Model {}
  ActiveRecord\Config::initialize(function(\$cfg) use (\$CONNECTION_STRINGS)
  {
    \$cfg->set_connections(\$CONNECTION_STRINGS);
    \$cfg->set_default_connection('$PAILS_ENV');
  });
  try
  {
    \$migration = MigrationHistory::find_by_migration_id("$MIGRATION_ID");
    echo \$migration != null ? \$migration->migration_date : '';
  }
  catch (Exception \$e)
  {
    echo "";
  }
EOT
)

  if [ -z "$MIGRATED_DATE" ]; then
    echo "Applying migration $file"

    php <<EOT
    <?php
    include('app/config/application.php');
    date_default_timezone_set('UTC');
    include('vendor/autoload.php');
    class MigrationHistory extends ActiveRecord\\Model {}
    // Fix for 'Invalid datetime format'
    ActiveRecord\\Connection::\$datetime_format = 'Y-m-d H:i:s'
    ActiveRecord\\Config::initialize(function(\$cfg) use (\$CONNECTION_STRINGS)
    {
      \$cfg->set_connections(\$CONNECTION_STRINGS);
      \$cfg->set_default_connection('$PAILS_ENV');
    });
    \$conn = ActiveRecord\\Connection::instance();
    try
    {
      \$conn->query(file_get_contents("$file"));
      MigrationHistory::create(array('migration_id' => '$MIGRATION_ID', 'migration_date' => new DateTime()));
      echo 'SUCCESS';
    }
    catch (Exception \$e)
    {
      echo 'FAILED: '.\$e;
    }
EOT
    echo
  fi
}

for plugin in vendor/*/* ; do
  if [ "$plugin" = "vendor/*/*" ]; then
    break
  fi

  if [ ! -e $plugin/db ]; then
    continue
  fi

  if [ -e $plugin/db/schema.sql ]; then
    apply_migration $plugin/db/schema.sql $plugin
  fi

  if [ -e $plugin/db/migrations ]; then
    if [ $(ls -1 $plugin/db/migrations | wc -l) -gt 0 ]; then
      for file in $plugin/db/migrations/*.sql ; do
        MIGRATION_ID=$(basename $file | cut -d _ -f 1)
        apply_migration $file $MIGRATION_ID
      done
    fi
  fi
done


if [ -e db/migrations ]; then
  if [ $(ls -1 db/migrations | wc -l) -gt 0 ]; then
    for file in db/migrations/*.sql ; do
      MIGRATION_ID=$(basename $file | cut -d _ -f 1)
      apply_migration $file $MIGRATION_ID
    done
  fi
fi

